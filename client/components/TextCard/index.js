import Head from 'next/head'
import Image from 'next/image'
import Link from "next/link"

import styles from "./Service.module.css"
import { Navbar, Nav, Container, Form, Button } from "react-bootstrap"
import { useState } from "react"
import ReportText from '../ReportText'

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { client } from '../../config/client';

export default function ServiceCard({ locale }) {
    const home = locale === "hi-HI" ? `/hi-HI` : `/`;
    const [result, setResult] = useState("")
    const [clicked, setClicked] = useState(false)
    const [text, setText] = useState("");

    
    const generateReport = async(e) => {
        e.preventDefault();
        setClicked(true)
        // TODO: required to integrate with backend 
        if (text.length === 0) {
            setClicked(false);
            setText("")

            let err = locale === "hi-HI" ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§™‡§æ‡§† ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ." :
                "Please enter a text. Text cannot be empty.";
            toast(err,
                {
                    closeOnClick: true,
                    autoClose: 10000
                });
        } else {
            const res = await fetch(`${client}/api/generateText`, {
                method: "POST", 
                body: JSON.stringify({
                    "base64": localStorage.getItem("encode"),
                    "text": text
                })
            })

            const { data, err } = await res.json();
            let result = "";
            if (err) {
                toast(err, {
                    closeOnClick: true,
                    autoClose: 10000
                });
            } else {
                let res1 = JSON.parse(data)
                console.log(res1['status'])
                if (res1['status'] === undefined) {
                    console.log(res1)
                    result = data;
                    setResult(result);
                }
                
            }

            
        }
    }

    const logout = async (e) => {
        e.preventDefault();

        const res = await fetch(`${client}/api/logout`, {
            method: "GET"
        }); 

        const { data, err } = await res.json(); 
        if (data !== null) {
            localStorage.setItem("auth", 0);
            localStorage.setItem("encode", "");
            window.location.href = `${client}/`;
        } else {
            let err = locale === "hi-HI" ? "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§Ö‡§∏‡§´‡§≤" : "Logout unsuccessful"
            toast(err, {
                closeOnClick: true,
                autoClose: 10000
            });
        }
    }

    return (
        <div suppressHydrationWarning className={styles.container}>
            <Navbar bg="light" expand="lg" className={styles.nav}>
                <Container>
                        <Nav className="me-auto">
                            <Nav.Link href={home} className={styles.nav_link}> {
                                locale === "hi-HI" ? "‡§π‡•ã‡§Æ‡§™‡•á‡§ú" : "Homepage"
                            }</Nav.Link>
                        </Nav>
                        <Nav className="mr-auto">
                            <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}
                                onClick={logout}
                            > {
                                    locale === "hi-HI" ? "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü" : "Logout"
                                }</Nav.Link>
                        </Nav>
                </Container>
            </Navbar>
            <main className={styles.main}>
                <h1 className={styles.title}>
                    {
                        locale === "hi-HI" ? "‡§µ‡•â‡§ö ‡§µ‡•Å‡§≤‡•ç‡§´ üê∫: ‡§™‡§æ‡§† ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü" : "Watch Wolf üê∫: Text Report"
                    }
                </h1>

                <p className={styles.description}>
                    <i>
                        {
                            locale === "hi-HI" ? <>
                                ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•Ä‡§°‡•Ä‡§è‡§´ ‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§† ‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§
                            <br />‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§∞‡§ï‡•á ‡§∏‡•á‡§Ç‡§ü‡•Ä‡§Æ‡•á‡§Ç‡§ü ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§®‡•Ä‡§ö‡•á ‡§∏‡§æ‡§¶‡§æ ‡§™‡§æ‡§† ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§
                            </> :
                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.
                                <br />Sentiment report can be generated by inputting the text. Enter the plain text below.
                                </>
                        }
                    </i>
                </p>
                <Form>
                    <Form.Group className="mb-3" controlId="exampleForm.ControlTextarea1">
                        <Form.Control as="textarea" rows={8}
                            className={styles.form_text}
                            value={text}
                            onChange={(e) => { setText(e.target.value) }}
                            disabled={clicked}
                        />
                    </Form.Group>
                </Form>
                <br />
                <div>
                    <Button variant="primary"
                        type="submit"
                        className={styles.submit}
                        onClick={generateReport}
                    >
                        {locale === "hi-HI" ? "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§ì" : "Generate Report"}
                    </Button>
                    <Button
                        type="submit"
                        className={`${styles.submit} ${styles.clear}`}
                        onClick={() => {
                            setClicked(false);
                            setResult("");
                            setText("");
                        }}
                    >
                        {locale === "hi-HI" ? "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç" : "Clear Report"}
                    </Button>
                </div>

                {
                    result.length === 0 ?
                    (clicked ? <div>
                        <img src="/loader.gif" alt="loader" className={styles.loader}/>
                    </div>: <></>
                    ) : 
                    <ReportText locale={locale} result={result} />
                }
            </main>

            <ToastContainer
                autoClose={10000}
                closeOnClick />
        </div>
    );
}