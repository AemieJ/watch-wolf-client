import Head from 'next/head'
import Image from 'next/image'
import Link from "next/link"

import styles from "./Service.module.css"
import { Navbar, Nav, Container, Form, Button } from "react-bootstrap"
import { useState } from "react"
import ReportImage from '../ReportImage'

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { client } from '../../config/client';
import { getMailLink } from "../mailTo";

export default function ServiceCard({ locale }) {
    const home = locale === "hi-HI" ? `/hi-HI` : `/`;
    const [result, setResult] = useState("")
    const [resultParse, setResultParse] = useState(null)
    const [clicked, setClicked] = useState(false)
    const [file, setFile] = useState(null)

    const RESPONSE_TYPE = {
        TEXT: "Text",
        PDF: "PDF",
        IMAGE: "Image",
        TWEET: "Tweet"
    }

    const uploadToClient = (event) => {
        if (event.target.files && event.target.files[0]) {
            const i = event.target.files[0];

            setFile(i);
        }
    };

    const generateReport = async (e) => {
        e.preventDefault()

        setClicked(true);
        // TODO: required to integrate with backend 
        if (file === null) {
            setClicked(false);
            setFile(null)

            let err = locale === "hi-HI" ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ö‡§ü‡•à‡§ö‡§Æ‡•á‡§Ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ|" :
                "Please attach an image. Attachment cannot be empty.";
            toast(err,
                {
                    closeOnClick: true,
                    autoClose: 10000
                });
        } else {
            let body = new FormData()
            body.append("file", file);
            body.append("encode", localStorage.getItem("encode"))
            console.log(file)
            const res = await fetch(`${client}/api/generateImage`, {
                method: "POST",
                body
            })

            const { data, err } = await res.json()
            let result = "";
            if (err) {
                setFile(null);
                toast(err, {
                    closeOnClick: true,
                    autoClose: 10000
                });
            } else {
                let res1 = JSON.parse(data)
                console.log(res1['status'])
                if (res1['status'] === undefined) {
                    console.log(res1)
                    result = data;
                    setResult(result);
                    setResultParse(res1)
                }
            }
        }
    }

    const logout = async (e) => {
        e.preventDefault();

        const res = await fetch(`${client}/api/logout`, {
            method: "GET"
        });

        const { data, err } = await res.json();
        if (data !== null) {
            localStorage.setItem("auth", 0);
            localStorage.setItem("encode", "");
            window.location.href = `${client}/`;
        } else {
            let err = locale === "hi-HI" ? "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§Ö‡§∏‡§´‡§≤" : "Logout unsuccessful"
            toast(err, {
                closeOnClick: true,
                autoClose: 10000
            });
        }
    }

    return (
        <div suppressHydrationWarning className={styles.container}>
            <Navbar bg="light" expand="lg" className={styles.nav}>
                <Container>
                    <Nav className="me-auto">
                        <Nav.Link href={home} className={styles.nav_link}> {
                            locale === "hi-HI" ? "‡§π‡•ã‡§Æ‡§™‡•á‡§ú" : "Homepage"
                        }</Nav.Link>
                    </Nav>
                    <Nav className="mr-auto">
                        <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}
                            onClick={logout}
                        > {
                                locale === "hi-HI" ? "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü" : "Logout"
                            }</Nav.Link>
                    </Nav>
                </Container>
            </Navbar>
            <main className={styles.main}>
                <h1 className={styles.title}>
                    {
                        locale === "hi-HI" ? "‡§µ‡•â‡§ö ‡§µ‡•Å‡§≤‡•ç‡§´ üê∫: ‡§õ‡§µ‡§ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü" : "Watch Wolf üê∫: Image Report"
                    }
                </h1>

                <p className={styles.description}>
                    <i>
                        {
                            locale === "hi-HI" ? <>
                                ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•Ä‡§°‡•Ä‡§è‡§´ ‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§† ‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§
                            <br />‡§õ‡§µ‡§ø ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® ‡§ï‡§∞‡§ï‡•á ‡§∏‡•á‡§Ç‡§ü‡•Ä‡§Æ‡•á‡§Ç‡§ü ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§®‡•Ä‡§ö‡•á ‡§¶‡•Ä ‡§ó‡§à ‡§õ‡§µ‡§ø ‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ 
                            </> :
                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.
                                <br />Sentiment report can be generated by attaching image. Attach the image below. 
                                </>
                        }
                    </i>
                </p>
                <input type="file" className={"form-control"} id="customFile"
                    accept="image/gif, image/jpeg, image/png, image/jpg"
                    onChange={uploadToClient}
                    disabled={clicked}
                />
                <br />
                <div className={styles.submit_btn_grp}>
                    <Button variant="primary"
                        type="submit"
                        className={styles.submit}
                        onClick={generateReport}
                    >
                        {locale === "hi-HI" ? "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§ì" : "Generate Report"}
                    </Button>
                    <Button
                        type="submit"
                        className={`${styles.submit} ${styles.clear}`}
                        onClick={() => {
                            setClicked(false);
                            setResult("");
                            setFile(null);
                            document.querySelector("#customFile").value = null;
                        }}
                    >
                        {locale === "hi-HI" ? "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç" : "Clear Report"}
                    </Button>
                    {
                        result.length !== 0 ? <a variant="primary"
                        type="submit"
                        className={`${styles.submit} ${styles.mail}`}
                        href={getMailLink(
                            RESPONSE_TYPE.IMAGE,
                            resultParse.decodedText,
                            [resultParse.sentiment.positiveScore, resultParse.sentiment.negativeScore, Number(resultParse.sentiment.neutralScore) + Number(resultParse.sentiment.mixedScore)],
                            resultParse.languageCode,
                            resultParse.entities
                        )}
                    >
                        {locale === "hi-HI" ? "‡§Æ‡•á‡§≤ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü" : "Mail Report"}
                    </a> : <></>
                    }
                </div>
                {
                    result.length === 0 ? (clicked ?
                        <div>
                            <img src="/loader.gif" alt="loader" className={styles.loader}/>
                        </div> : <></>
                    ) :
                        <>
                            <ReportImage locale={locale} result={result} />
                        </>
                }
            </main>

            <ToastContainer
                autoClose={10000}
                closeOnClick />
        </div>
    );
}