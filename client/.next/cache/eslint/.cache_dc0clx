[{"/Users/aemiej/Documents/github/hackmanthon/client/pages/_app.js":"1","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generatePDF.js":"2","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateText.js":"3","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateTweet.js":"4","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/login.js":"5","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/logout.js":"6","/Users/aemiej/Documents/github/hackmanthon/client/pages/image.js":"7","/Users/aemiej/Documents/github/hackmanthon/client/pages/index.js":"8","/Users/aemiej/Documents/github/hackmanthon/client/pages/pdf.js":"9","/Users/aemiej/Documents/github/hackmanthon/client/pages/text.js":"10","/Users/aemiej/Documents/github/hackmanthon/client/pages/tweet.js":"11","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateImage.js":"12","/Users/aemiej/Documents/github/hackmanthon/client/components/HomeCard/index.js":"13","/Users/aemiej/Documents/github/hackmanthon/client/components/ImageCard/index.js":"14","/Users/aemiej/Documents/github/hackmanthon/client/components/LoginCard/index.js":"15","/Users/aemiej/Documents/github/hackmanthon/client/components/PDFCard/index.js":"16","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportImage/RadialSeparators.js":"17","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportImage/index.js":"18","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportPDF/RadialSeparators.js":"19","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportPDF/index.js":"20","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportText/RadialSeparators.js":"21","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportText/index.js":"22","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportTweet/RadialSeparators.js":"23","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportTweet/index.js":"24","/Users/aemiej/Documents/github/hackmanthon/client/components/TextCard/index.js":"25","/Users/aemiej/Documents/github/hackmanthon/client/components/TweetCard/index.js":"26","/Users/aemiej/Documents/github/hackmanthon/client/components/mailTo.js":"27"},{"size":184,"mtime":1655395783570,"results":"28","hashOfConfig":"29"},{"size":1585,"mtime":1655703175347,"results":"30","hashOfConfig":"29"},{"size":772,"mtime":1655569148789,"results":"31","hashOfConfig":"29"},{"size":781,"mtime":1655569202641,"results":"32","hashOfConfig":"29"},{"size":569,"mtime":1655714802500,"results":"33","hashOfConfig":"29"},{"size":436,"mtime":1655556595691,"results":"34","hashOfConfig":"29"},{"size":1707,"mtime":1656413952190,"results":"35","hashOfConfig":"29"},{"size":2673,"mtime":1656413966031,"results":"36","hashOfConfig":"29"},{"size":1694,"mtime":1656414024788,"results":"37","hashOfConfig":"29"},{"size":1703,"mtime":1656414035153,"results":"38","hashOfConfig":"29"},{"size":1709,"mtime":1656414040328,"results":"39","hashOfConfig":"29"},{"size":1609,"mtime":1655703337227,"results":"40","hashOfConfig":"29"},{"size":355,"mtime":1655631208091,"results":"41","hashOfConfig":"29"},{"size":8135,"mtime":1656389791677,"results":"42","hashOfConfig":"29"},{"size":6169,"mtime":1655714811082,"results":"43","hashOfConfig":"29"},{"size":8080,"mtime":1656400233456,"results":"44","hashOfConfig":"29"},{"size":512,"mtime":1655627988723,"results":"45","hashOfConfig":"29"},{"size":11138,"mtime":1655713095005,"results":"46","hashOfConfig":"29"},{"size":512,"mtime":1655628007735,"results":"47","hashOfConfig":"29"},{"size":9640,"mtime":1655711511867,"results":"48","hashOfConfig":"29"},{"size":512,"mtime":1655628017552,"results":"49","hashOfConfig":"29"},{"size":9619,"mtime":1655711485208,"results":"50","hashOfConfig":"29"},{"size":511,"mtime":1655628025544,"results":"51","hashOfConfig":"29"},{"size":11828,"mtime":1656411268664,"results":"52","hashOfConfig":"29"},{"size":7955,"mtime":1656389464798,"results":"53","hashOfConfig":"29"},{"size":9720,"mtime":1656389800037,"results":"54","hashOfConfig":"29"},{"size":1898,"mtime":1656356869650,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wm6vvw",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aemiej/Documents/github/hackmanthon/client/pages/_app.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generatePDF.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateText.js",["119"],"import { server } from \"../../config/server.js\"\n\nexport default async (req, res) => {\n    let body = JSON.parse(req.body);\n    let base64 = body.base64;\n    let text = body.text;\n\n    let requestOptions = {\n        method: 'POST',\n        headers: {\n            \"Authorization\": `Basic ${base64}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"text\": text\n        }),\n        redirect: 'follow'\n    };\n\n    try {\n        let response = await fetch(`${server}/api/examine/text`, requestOptions); \n        let data = await response.json();\n        res.status(200).json({ data: JSON.stringify(data), err: null });\n    } catch (err) {\n        res.status(500).json({ data: null, err: 'Generation unsuccessful'})\n    }\n\n\n}","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateTweet.js",["120"],"import { server } from \"../../config/server.js\"\n\nexport default async (req, res) => {\n    let body = JSON.parse(req.body);\n    let base64 = body.base64;\n    let tweet = body.tweet;\n\n    let requestOptions = {\n        method: 'POST',\n        headers: {\n            \"Authorization\": `Basic ${base64}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"tweetId\": tweet\n        }),\n        redirect: 'follow'\n    };\n\n    try {\n        let response = await fetch(`${server}/api/examine/twitter`, requestOptions); \n        let data = await response.json();\n        res.status(200).json({ data: JSON.stringify(data), err: null });\n    } catch (err) {\n        res.status(500).json({ data: null, err: 'Generation unsuccessful'})\n    }\n\n\n}","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/login.js",["121"],"import { server } from \"../../config/server.js\"\n\nexport default async (req, res) => {\n    let base64 = req.body;\n\n    let requestOptions = {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Basic ${base64}`, \n        },\n        redirect: 'follow'\n    };\n\n    try {\n        let response = await fetch(`${server}/api/auth/login`, requestOptions);\n        const data = await response.text()\n        res.status(200).json({ data: data, err: null });\n    } catch (err) {\n        res.status(200).json({ data: null, err: \"Login unsuccessful\" });\n    }\n\n}","/Users/aemiej/Documents/github/hackmanthon/client/pages/api/logout.js",["122"],"import { server } from \"../../config/server.js\"\n\nexport default async (req, res) => {\n    let requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n    };\n\n    try {\n        let response = await fetch(`${server}/api/auth/logout`, requestOptions);\n        res.status(200).json({ data: \"Logout successful\", err: null });\n    } catch (err) {\n        res.status(200).json({ data: null, err: \"Logout unsuccessful\" });\n    }\n\n}","/Users/aemiej/Documents/github/hackmanthon/client/pages/image.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/pdf.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/text.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/tweet.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/pages/api/generateImage.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/HomeCard/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ImageCard/index.js",["123"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport Link from \"next/link\"\n\nimport styles from \"./Service.module.css\"\nimport { Navbar, Nav, Container, Form, Button } from \"react-bootstrap\"\nimport { useState } from \"react\"\nimport ReportImage from '../ReportImage'\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { client } from '../../config/client';\nimport { getMailLink } from \"../mailTo\";\n\nexport default function ServiceCard({ locale }) {\n    const home = locale === \"hi-HI\" ? `/hi-HI` : `/`;\n    const [result, setResult] = useState(\"\")\n    const [resultParse, setResultParse] = useState(null)\n    const [clicked, setClicked] = useState(false)\n    const [file, setFile] = useState(null)\n\n    const RESPONSE_TYPE = {\n        TEXT: \"Text\",\n        PDF: \"PDF\",\n        IMAGE: \"Image\",\n        TWEET: \"Tweet\"\n    }\n\n    const uploadToClient = (event) => {\n        if (event.target.files && event.target.files[0]) {\n            const i = event.target.files[0];\n\n            setFile(i);\n        }\n    };\n\n    const generateReport = async (e) => {\n        e.preventDefault()\n\n        setClicked(true);\n        // TODO: required to integrate with backend \n        if (file === null) {\n            setClicked(false);\n            setFile(null)\n\n            let err = locale === \"hi-HI\" ? \"कृपया एक छवि संलग्न करें। अटैचमेंट खाली नहीं हो सकता|\" :\n                \"Please attach an image. Attachment cannot be empty.\";\n            toast(err,\n                {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n        } else {\n            let body = new FormData()\n            body.append(\"file\", file);\n            body.append(\"encode\", localStorage.getItem(\"encode\"))\n            console.log(file)\n            const res = await fetch(`${client}/api/generateImage`, {\n                method: \"POST\",\n                body\n            })\n\n            const { data, err } = await res.json()\n            let result = \"\";\n            if (err) {\n                setFile(null);\n                toast(err, {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n            } else {\n                let res1 = JSON.parse(data)\n                console.log(res1['status'])\n                if (res1['status'] === undefined) {\n                    console.log(res1)\n                    result = data;\n                    setResult(result);\n                    setResultParse(res1)\n                }\n            }\n        }\n    }\n\n    const logout = async (e) => {\n        e.preventDefault();\n\n        const res = await fetch(`${client}/api/logout`, {\n            method: \"GET\"\n        });\n\n        const { data, err } = await res.json();\n        if (data !== null) {\n            localStorage.setItem(\"auth\", 0);\n            localStorage.setItem(\"encode\", \"\");\n            window.location.href = `${client}/`;\n        } else {\n            let err = locale === \"hi-HI\" ? \"लॉगआउट असफल\" : \"Logout unsuccessful\"\n            toast(err, {\n                closeOnClick: true,\n                autoClose: 10000\n            });\n        }\n    }\n\n    return (\n        <div suppressHydrationWarning className={styles.container}>\n            <Navbar bg=\"light\" expand=\"lg\" className={styles.nav}>\n                <Container>\n                    <Nav className=\"me-auto\">\n                        <Nav.Link href={home} className={styles.nav_link}> {\n                            locale === \"hi-HI\" ? \"होमपेज\" : \"Homepage\"\n                        }</Nav.Link>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}\n                            onClick={logout}\n                        > {\n                                locale === \"hi-HI\" ? \"लॉग आउट\" : \"Logout\"\n                            }</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n            <main className={styles.main}>\n                <h1 className={styles.title}>\n                    {\n                        locale === \"hi-HI\" ? \"वॉच वुल्फ 🐺: छवि रिपोर्ट\" : \"Watch Wolf 🐺: Image Report\"\n                    }\n                </h1>\n\n                <p className={styles.description}>\n                    <i>\n                        {\n                            locale === \"hi-HI\" ? <>\n                                छवियों और पीडीएफ से हिंदी और अंग्रेजी भाषा में पाठ की भावना का विश्लेषण करें।\n                            <br />छवि संलग्न करके सेंटीमेंट रिपोर्ट तैयार की जा सकती है। नीचे दी गई छवि संलग्न करें। \n                            </> :\n                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.\n                                <br />Sentiment report can be generated by attaching image. Attach the image below. \n                                </>\n                        }\n                    </i>\n                </p>\n                <input type=\"file\" className={\"form-control\"} id=\"customFile\"\n                    accept=\"image/gif, image/jpeg, image/png, image/jpg\"\n                    onChange={uploadToClient}\n                    disabled={clicked}\n                />\n                <br />\n                <div className={styles.submit_btn_grp}>\n                    <Button variant=\"primary\"\n                        type=\"submit\"\n                        className={styles.submit}\n                        onClick={generateReport}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट बनाओ\" : \"Generate Report\"}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.clear}`}\n                        onClick={() => {\n                            setClicked(false);\n                            setResult(\"\");\n                            setFile(null);\n                            document.querySelector(\"#customFile\").value = null;\n                        }}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट साफ़ करें\" : \"Clear Report\"}\n                    </Button>\n                    {\n                        result.length !== 0 ? <a variant=\"primary\"\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.mail}`}\n                        href={getMailLink(\n                            RESPONSE_TYPE.IMAGE,\n                            resultParse.decodedText,\n                            [resultParse.sentiment.positiveScore, resultParse.sentiment.negativeScore, Number(resultParse.sentiment.neutralScore) + Number(resultParse.sentiment.mixedScore)],\n                            resultParse.languageCode,\n                            resultParse.entities\n                        )}\n                    >\n                        {locale === \"hi-HI\" ? \"मेल रिपोर्ट\" : \"Mail Report\"}\n                    </a> : <></>\n                    }\n                </div>\n                {\n                    result.length === 0 ? (clicked ?\n                        <div>\n                            <img src=\"/loader.gif\" alt=\"loader\" className={styles.loader}/>\n                        </div> : <></>\n                    ) :\n                        <>\n                            <ReportImage locale={locale} result={result} />\n                        </>\n                }\n            </main>\n\n            <ToastContainer\n                autoClose={10000}\n                closeOnClick />\n        </div>\n    );\n}","/Users/aemiej/Documents/github/hackmanthon/client/components/LoginCard/index.js",["124","125"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport Link from \"next/link\"\nimport { Form, Button, Navbar, Nav, Container } from \"react-bootstrap\"\nimport { useState } from \"react\"\n\nimport styles from \"./Login.module.css\"\nimport { client } from '../../config/client';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nexport default function LoginCard({ locale, service }) {\n    const home = locale === \"hi-HI\" ? `/hi-HI` : `/`;\n    const serviceLink = locale === \"hi-HI\" ? `/hi-HI/${service}` : `/${service}`\n    const [name, setName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const utf8_to_b64 = (str) => {\n        return window.btoa(unescape(encodeURIComponent(str)));\n    }\n\n    const submitLogin = async(e) => {\n        e.preventDefault();\n        // TODO: to integrate with backend\n        let flag = 1;\n        let base64 = utf8_to_b64(`${name}:${password}`);\n\n        const res = await fetch(`${client}/api/login`, {\n            method: \"post\", \n            body: base64\n        });\n\n        const {data, err} = await res.json();\n        \n        if (data === null || data.length === 0) flag = 0;\n        if (flag) {\n            localStorage.setItem(\"auth\", 1);\n            localStorage.setItem(\"encode\", base64);\n            window.location.href = serviceLink;\n        }\n        else {\n            let err = locale === \"hi-HI\" ? \"लॉगिन सफल नहीं रहा। पुनः प्रयास करें या होमपेज पर जाएं\" : \"Login hasn't been successful. Try again or go to homepage\";\n            toast(err,\n                {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n        }\n    }\n\n    return (\n        <div className={styles.container}>\n            <Navbar bg=\"light\" expand=\"lg\" className={styles.nav}>\n                <Container>\n                    <Nav className=\"me-auto\">\n                        {/* <Nav.Link href={serviceLink} className={styles.nav_link}>&larr; {\n                            locale === \"hi-HI\" ? \"सेवा पर वापस\" : \"Back to service\"\n                        }</Nav.Link> */}\n                        <Nav.Link href={home} className={styles.nav_link}> {\n                            locale === \"hi-HI\" ? \"होमपेज\" : \"Homepage\"\n                        }</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n            <main className={styles.main}>\n                <h1 className={styles.title}>\n                    {\n                        locale === \"hi-HI\" ? \"वॉच वुल्फ 🐺: लॉग इन करें\" : \"Watch Wolf 🐺: Login\"\n                    }\n                </h1>\n\n                <p className={styles.description}>\n                    <i>\n                        {\n                            locale === \"hi-HI\" ? <>\n                                छवियों और पीडीएफ से हिंदी और अंग्रेजी भाषा में पाठ की भावना का विश्लेषण करें।\n                            <br />यह लॉगिन पेज है और किसी भी सुविधा को एक्सेस करने से पहले अधिकृत होना आवश्यक है।\n                            </> :\n                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.\n                                <br />This is the login page and one needs to be authorized before accessing any feature.\n                                </>\n                        }\n                    </i>\n                </p>\n\n                <div className={styles.row}>\n                    <div className={styles.card}>\n                        <Form>\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                <Form.Label\n                                    className={styles.label}\n                                >{locale === \"hi-HI\" ? \"उपयोगकर्ता नाम\" : \"Username\"}</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={name}\n                                    onChange={e => { setName(e.target.value) }}\n                                    placeholder={locale === \"hi-HI\" ? \"उपयोगकर्ता नाम दर्ज करें\" : \"Enter Username\"} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                                <Form.Label\n                                    className={styles.label}\n                                >{locale === \"hi-HI\" ? \"पासवर्ड\" : \"Password\"}</Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    value={password}\n                                    onChange={e => { setPassword(e.target.value) }}\n                                    placeholder={locale === \"hi-HI\" ? \"पास वर्ड दर्ज करें\" : \"Enter Password\"} />\n                            </Form.Group>\n                            <br />\n                            <Button variant=\"primary\"\n                                type=\"submit\"\n                                className={styles.submit}\n                                onClick={submitLogin}\n                            >\n                                {locale === \"hi-HI\" ? \"प्रस्तुत करना\" : \"Submit\"}\n                            </Button>\n                        </Form>\n                    </div>\n                    <div className={styles.img}>\n                        <img src=\"/police.png\" />\n                    </div>\n                </div>\n            </main>\n            <ToastContainer\n                autoClose={10000}\n                closeOnClick />\n        </div>\n    );\n}","/Users/aemiej/Documents/github/hackmanthon/client/components/PDFCard/index.js",["126"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport Link from \"next/link\"\n\nimport styles from \"./Service.module.css\"\nimport { Navbar, Nav, Container, Form, Button } from \"react-bootstrap\"\nimport { useState } from \"react\"\nimport ReportPDF from '../ReportPDF'\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { client } from '../../config/client';\nimport { getMailLink } from \"../mailTo\";\n\nexport default function ServiceCard({ locale }) {\n    const home = locale === \"hi-HI\" ? `/hi-HI` : `/`;\n    const [result, setResult] = useState(\"\")\n    const [resultParse, setResultParse] = useState(null)\n    const [clicked, setClicked] = useState(false)\n    const [file, setFile] = useState(null)\n\n    const RESPONSE_TYPE = {\n        TEXT: \"Text\",\n        PDF: \"PDF\",\n        IMAGE: \"Image\",\n        TWEET: \"Tweet\"\n    }\n    \n    const uploadToClient = (event) => {\n        if (event.target.files && event.target.files[0]) {\n          const i = event.target.files[0];\n    \n          setFile(i);\n        }\n    };\n\n    const generateReport = async (e) => {\n        e.preventDefault();\n\n        setClicked(true)\n        // TODO: required to integrate with backend\n        if (file === null) {\n            setClicked(false);\n            setFile(null)\n\n            let err = locale === \"hi-HI\" ? \"कृपया एक पीडीएफ संलग्न करें। अटैचमेंट खाली नहीं हो सकता|\" :\n                \"Please attach a PDF. Attachment cannot be empty.\";\n            toast(err,\n                {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n        } else {\n            let body = new FormData()\n            body.append(\"file\", file);\n            body.append(\"encode\", localStorage.getItem(\"encode\"))\n            console.log(file)\n            const res = await fetch(`${client}/api/generatePDF`, {\n                method: \"POST\",\n                body\n            })\n\n            const { data, err } = await res.json()\n            let result = \"\";\n            if (err) {\n                setFile(null);\n                toast(err, {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n            } else {\n                let res1 = JSON.parse(data)\n                console.log(res1['status'])\n                if (res1['status'] === undefined) {\n                    console.log(res1)\n                    result = data;\n                    setResult(result);\n                    setResultParse(res1);\n                }\n            }\n        }\n    }\n\n    const logout = async (e) => {\n        e.preventDefault();\n\n        const res = await fetch(`${client}/api/logout`, {\n            method: \"GET\"\n        });\n\n        const { data, err } = await res.json();\n        if (data !== null) {\n            localStorage.setItem(\"auth\", 0);\n            localStorage.setItem(\"encode\", \"\");\n            window.location.href = `${client}/`;\n        } else {\n            let err = locale === \"hi-HI\" ? \"लॉगआउट असफल\" : \"Logout unsuccessful\"\n            toast(err, {\n                closeOnClick: true,\n                autoClose: 10000\n            });\n        }\n    }\n\n    return (\n        <div suppressHydrationWarning className={styles.container}>\n            <Navbar bg=\"light\" expand=\"lg\" className={styles.nav}>\n                <Container>\n                    <Nav className=\"me-auto\">\n                        <Nav.Link href={home} className={styles.nav_link}> {\n                            locale === \"hi-HI\" ? \"होमपेज\" : \"Homepage\"\n                        }</Nav.Link>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}\n                            onClick={logout}\n                        > {\n                                locale === \"hi-HI\" ? \"लॉग आउट\" : \"Logout\"\n                            }</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n            <main className={styles.main}>\n                <h1 className={styles.title}>\n                    {\n                        locale === \"hi-HI\" ? \"वॉच वुल्फ 🐺: पीडीएफ रिपोर्ट\" : \"Watch Wolf 🐺: PDF Report\"\n                    }\n                </h1>\n\n                <p className={styles.description}>\n                    <i>\n                        {\n                            locale === \"hi-HI\" ? <>\n                                छवियों और पीडीएफ से हिंदी और अंग्रेजी भाषा में पाठ की भावना का विश्लेषण करें।\n                            <br />पीडीएफ संलग्न करके सेंटीमेंट रिपोर्ट तैयार की जा सकती है। नीचे पीडीएफ संलग्न करें।\n                            </> :\n                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.\n                                <br />Sentiment report can be generated by attaching PDF. Attach the PDF below.\n                                </>\n                        }\n                    </i>\n                </p>\n                <input type=\"file\" className={\"form-control\"} id=\"customFile\"\n                    accept=\"application/pdf\"\n                    onChange={uploadToClient}\n                    disabled={clicked}\n                />\n                <br />\n                <div className={styles.submit_btn_grp}>\n                    <Button variant=\"primary\"\n                        type=\"submit\"\n                        className={styles.submit}\n                        onClick={generateReport}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट बनाओ\" : \"Generate Report\"}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.clear}`}\n                        onClick={() => {\n                            setClicked(false);\n                            setResult(\"\");\n                            setFile(null);\n                            document.querySelector(\"#customFile\").value = null;\n                        }}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट साफ़ करें\" : \"Clear Report\"}\n                    </Button>\n                    {\n                        result.length !== 0 ? <a variant=\"primary\"\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.mail}`}\n                        href={getMailLink(\n                            RESPONSE_TYPE.PDF,\n                            resultParse.decodedText,\n                            [resultParse.sentiment.positiveScore, resultParse.sentiment.negativeScore, Number(resultParse.sentiment.neutralScore) + Number(resultParse.sentiment.mixedScore)],\n                            resultParse.languageCode,\n                            resultParse.entities\n                        )}\n                    >\n                        {locale === \"hi-HI\" ? \"मेल रिपोर्ट\" : \"Mail Report\"}\n                    </a> : <></>\n                    }\n                </div>\n\n                {\n                    result.length === 0 ? (clicked ? <div>\n                        <img src=\"/loader.gif\" alt=\"loader\" className={styles.loader}/>\n                    </div>: <></>\n                    ) :\n                        <>\n                            <ReportPDF locale={locale} result={result} />\n                        </>\n                }\n            </main>\n\n            <ToastContainer\n                autoClose={10000}\n                closeOnClick />\n        </div>\n    );\n}","/Users/aemiej/Documents/github/hackmanthon/client/components/ReportImage/RadialSeparators.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportImage/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportPDF/RadialSeparators.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportPDF/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportText/RadialSeparators.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportText/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportTweet/RadialSeparators.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/ReportTweet/index.js",[],"/Users/aemiej/Documents/github/hackmanthon/client/components/TextCard/index.js",["127"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport Link from \"next/link\"\n\nimport styles from \"./Service.module.css\"\nimport { Navbar, Nav, Container, Form, Button } from \"react-bootstrap\"\nimport { useState } from \"react\"\nimport ReportText from '../ReportText'\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { client } from '../../config/client';\nimport { getMailLink } from \"../mailTo\";\n\nexport default function ServiceCard({ locale }) {\n    const home = locale === \"hi-HI\" ? `/hi-HI` : `/`;\n    const [result, setResult] = useState(\"\")\n    const [resultParse, setResultParse] = useState(null)\n    const [clicked, setClicked] = useState(false)\n    const [text, setText] = useState(\"\");\n\n    const RESPONSE_TYPE = {\n        TEXT: \"Text\",\n        PDF: \"PDF\",\n        IMAGE: \"Image\",\n        TWEET: \"Tweet\"\n    }\n\n\n    const generateReport = async (e) => {\n        e.preventDefault();\n        setClicked(true)\n        // TODO: required to integrate with backend \n        if (text.length === 0) {\n            setClicked(false);\n            setText(\"\")\n\n            let err = locale === \"hi-HI\" ? \"कृपया एक पाठ दर्ज करें। टेक्स्ट खाली नहीं हो सकता.\" :\n                \"Please enter a text. Text cannot be empty.\";\n            toast(err,\n                {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n        } else {\n            const res = await fetch(`${client}/api/generateText`, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    \"base64\": localStorage.getItem(\"encode\"),\n                    \"text\": text\n                })\n            })\n\n            const { data, err } = await res.json();\n            let result = \"\";\n            if (err) {\n                toast(err, {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n            } else {\n                let res1 = JSON.parse(data)\n                console.log(res1['status'])\n                if (res1['status'] === undefined) {\n                    console.log(res1)\n                    result = data;\n                    setResult(result);\n                    setResultParse(res1)\n                }\n\n            }\n\n\n        }\n    }\n\n    const logout = async (e) => {\n        e.preventDefault();\n\n        const res = await fetch(`${client}/api/logout`, {\n            method: \"GET\"\n        });\n\n        const { data, err } = await res.json();\n        if (data !== null) {\n            localStorage.setItem(\"auth\", 0);\n            localStorage.setItem(\"encode\", \"\");\n            window.location.href = `${client}/`;\n        } else {\n            let err = locale === \"hi-HI\" ? \"लॉगआउट असफल\" : \"Logout unsuccessful\"\n            toast(err, {\n                closeOnClick: true,\n                autoClose: 10000\n            });\n        }\n    }\n\n    return (\n        <div suppressHydrationWarning className={styles.container}>\n            <Navbar bg=\"light\" expand=\"lg\" className={styles.nav}>\n                <Container>\n                    <Nav className=\"me-auto\">\n                        <Nav.Link href={home} className={styles.nav_link}> {\n                            locale === \"hi-HI\" ? \"होमपेज\" : \"Homepage\"\n                        }</Nav.Link>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}\n                            onClick={logout}\n                        > {\n                                locale === \"hi-HI\" ? \"लॉग आउट\" : \"Logout\"\n                            }</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n            <main className={styles.main}>\n                <h1 className={styles.title}>\n                    {\n                        locale === \"hi-HI\" ? \"वॉच वुल्फ 🐺: पाठ रिपोर्ट\" : \"Watch Wolf 🐺: Text Report\"\n                    }\n                </h1>\n\n                <p className={styles.description}>\n                    <i>\n                        {\n                            locale === \"hi-HI\" ? <>\n                                छवियों और पीडीएफ से हिंदी और अंग्रेजी भाषा में पाठ की भावना का विश्लेषण करें।\n                            <br />टेक्स्ट इनपुट करके सेंटीमेंट रिपोर्ट तैयार की जा सकती है। नीचे सादा पाठ दर्ज करें।\n                            </> :\n                                <>Analyze the sentiment of the text from images and PDF in Hindi and English Language.\n                                <br />Sentiment report can be generated by inputting the text. Enter the plain text below.\n                                </>\n                        }\n                    </i>\n                </p>\n                <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                        <Form.Control as=\"textarea\" rows={8}\n                            className={styles.form_text}\n                            value={text}\n                            onChange={(e) => { setText(e.target.value) }}\n                            disabled={clicked}\n                        />\n                    </Form.Group>\n                </Form>\n                <br />\n                <div className={styles.submit_btn_grp}>\n                    <Button variant=\"primary\"\n                        type=\"submit\"\n                        className={styles.submit}\n                        onClick={generateReport}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट बनाओ\" : \"Generate Report\"}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.clear}`}\n                        onClick={() => {\n                            setClicked(false);\n                            setResult(\"\");\n                            setText(\"\");\n                        }}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट साफ़ करें\" : \"Clear Report\"}\n                    </Button>\n                    {\n                        result.length !== 0 ? <a variant=\"primary\"\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.mail}`}\n                        href={getMailLink(\n                            RESPONSE_TYPE.TEXT,\n                            text,\n                            [resultParse.sentiment.positiveScore, resultParse.sentiment.negativeScore, Number(resultParse.sentiment.neutralScore) + Number(resultParse.sentiment.mixedScore)],\n                            resultParse.languageCode,\n                            resultParse.entities\n                        )}\n                    >\n                        {locale === \"hi-HI\" ? \"मेल रिपोर्ट\" : \"Mail Report\"}\n                    </a> : <></>\n                    }\n                    \n                </div>\n\n                {\n                    result.length === 0 ?\n                        (clicked ? <div>\n                            <img src=\"/loader.gif\" alt=\"loader\" className={styles.loader} />\n                        </div> : <></>\n                        ) :\n                        <ReportText locale={locale} result={result} />\n                }\n            </main>\n\n            <ToastContainer\n                autoClose={10000}\n                closeOnClick />\n        </div>\n    );\n}","/Users/aemiej/Documents/github/hackmanthon/client/components/TweetCard/index.js",["128"],"import Head from 'next/head'\nimport Image from 'next/image'\nimport Link from \"next/link\"\n\nimport styles from \"./Service.module.css\"\nimport { Navbar, Nav, Container, Form, Button, InputGroup, FormControl } from \"react-bootstrap\"\nimport { useState } from \"react\"\nimport ReportTweet from '../ReportTweet'\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { client } from '../../config/client';\nimport { getMailLink } from \"../mailTo\";\n\nexport default function ServiceCard({ locale }) {\n    const home = locale === \"hi-HI\" ? `/hi-HI` : `/`;\n    const [result, setResult] = useState(\"\")\n    const [resultParse, setResultParse] = useState(null)\n    const [tweetContent, setTweetContent] = useState(\"\")\n    const [clicked, setClicked] = useState(false)\n    const [text, setText] = useState(\"\")\n\n    const RESPONSE_TYPE = {\n        TEXT: \"Text\",\n        PDF: \"PDF\",\n        IMAGE: \"Image\",\n        TWEET: \"Tweet\"\n    }\n\n    const generateReport = async(e) => {\n        e.preventDefault()\n        setClicked(true)\n        // TODO: required to integrate with backend \n        if (text.length === 0) {\n            setClicked(false);\n            setText(\"\")\n\n            let err = locale === \"hi-HI\" ? \"कृपया ट्वीट दर्ज करें। ट्वीट खाली नहीं हो सकता|\" :\n                \"Please enter the tweet. Tweet cannot be empty.\";\n            toast(err,\n                {\n                    closeOnClick: true,\n                    autoClose: 10000\n                });\n        } else {\n            let tweetRegex = /http(?:s)?:\\/\\/(?:www\\.)?twitter\\.com\\/([a-zA-Z0-9_]+)/g;\n            let found = text.match(tweetRegex);\n            if (found !== null) {\n                let removeQuery = text.split(\"?\")[0]\n                let list = removeQuery.split(\"/\");\n                let tweetID = list[list.length - 1];\n                \n                const res = await fetch(`${client}/api/generateTweet`, {\n                    method: \"POST\", \n                    body: JSON.stringify({\n                        \"base64\": localStorage.getItem(\"encode\"),\n                        \"tweet\": tweetID\n                    })\n                })\n\n                const { data, err } = await res.json();\n                console.log(data);\n\n                let result = \"\";\n                if (err) {\n                    toast(err, {\n                        closeOnClick: true,\n                        autoClose: 10000\n                    });\n                } else {\n                    let res1 = JSON.parse(data)\n                    if (res1['status'] === undefined) {\n                        console.log(res1)\n                        result = data;\n                        setResult(result);\n                        setResultParse(res1);\n\n                        let content = `\n                        ID: ${res1.tweet.id}\n                        Text: ${res1.tweet.text}\n                        Username: @${res1.tweet.username}\n                        User screen name: ${res1.tweet.userScreenName}\n                        `\n\n                        setTweetContent(content)\n                    }\n                    \n                }\n            } else {\n                setClicked(false);\n                setText(\"\")\n\n                let err = locale === \"hi-HI\" ? \"ट्वीट अमान्य है। एक वैध ट्वीट यूआरएल दर्ज करें\" :\n                    \"Tweet is invalid. Enter a valid tweet URL\";\n                toast(err,\n                    {\n                        closeOnClick: true,\n                        autoClose: 10000\n                    });\n            }\n        }\n\n    }\n\n    const logout = async (e) => {\n        e.preventDefault();\n\n        const res = await fetch(`${client}/api/logout`, {\n            method: \"GET\"\n        }); \n\n        const { data, err } = await res.json(); \n        if (data !== null) {\n            localStorage.setItem(\"auth\", 0);\n            localStorage.setItem(\"encode\", \"\");\n            window.location.href = `${client}/`;\n        } else {\n            let err = locale === \"hi-HI\" ? \"लॉगआउट असफल\" : \"Logout unsuccessful\"\n            toast(err, {\n                closeOnClick: true,\n                autoClose: 10000\n            });\n        }\n    }\n\n    return (\n        <div suppressHydrationWarning className={styles.container}>\n            <Navbar bg=\"light\" expand=\"lg\" className={styles.nav}>\n                <Container>\n                    <Nav className=\"me-auto\">\n                        <Nav.Link href={home} className={styles.nav_link}> {\n                            locale === \"hi-HI\" ? \"होमपेज\" : \"Homepage\"\n                        }</Nav.Link>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href={home} className={`${styles.nav_link} ${styles.nav_btn}`}\n                            onClick={logout}\n                        > {\n                                locale === \"hi-HI\" ? \"लॉग आउट\" : \"Logout\"\n                            }</Nav.Link>\n                    </Nav>\n                </Container>\n            </Navbar>\n            <main className={styles.main}>\n                <h1 className={styles.title}>\n                    {\n                        locale === \"hi-HI\" ? \"वॉच वुल्फ 🐺: ट्वीट रिपोर्ट\" : \"Watch Wolf 🐺: Tweet Report\"\n                    }\n                </h1>\n\n                <p className={styles.description}>\n                    <i>\n                        {\n                            locale === \"hi-HI\" ? <>\n                                हिंदी और अंग्रेजी भाषा में ट्वीट से पाठ की भावना का विश्लेषण करें।\n                            <br />ट्वीट लिंक टाइप करके एक सेंटीमेंट रिपोर्ट तैयार की जा सकती है। नीचे दिए गए बॉक्स में लिंक डालें।\n                            </> :\n                                <>Analyze the sentiment of the text from tweets in Hindi and English Language.\n                                <br />A sentiment report can be generated by typing the tweet URL. Input the URL in the below box.\n                                </>\n                        }\n                    </i>\n                </p>\n                <InputGroup className={`mb-3 ${styles.input_grp}`}>\n                    <InputGroup.Text id=\"basic-addon1\">\n                        {\n                            locale === \"hi-HI\" ? \"ट्वीट यूआरएल दर्ज करें\" : \"Enter Tweet URL\"\n                        }</InputGroup.Text>\n                    <FormControl\n                        placeholder={locale === \"hi-HI\" ? \"ट्वीट यूआरएल\" : \"Tweet URL\"}\n                        aria-label={locale === \"hi-HI\" ? \"ट्वीट यूआरएल\" : \"Tweet URL\"}\n                        aria-describedby=\"basic-addon1\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        disabled={clicked}\n                    />\n                </InputGroup>\n                <br />\n                <div className={styles.submit_btn_grp}>\n                    <Button variant=\"primary\"\n                        type=\"submit\"\n                        className={styles.submit}\n                        onClick={generateReport}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट बनाओ\" : \"Generate Report\"}\n                    </Button>\n                    <Button\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.clear}`}\n                        onClick={() => {\n                            setClicked(false);\n                            setResult(\"\");\n                            setText(\"\");\n                        }}\n                    >\n                        {locale === \"hi-HI\" ? \"रिपोर्ट साफ़ करें\" : \"Clear Report\"}\n                    </Button>\n                    {\n                        result.length !== 0 ? <a variant=\"primary\"\n                        type=\"submit\"\n                        className={`${styles.submit} ${styles.mail}`}\n                        href={getMailLink(\n                            RESPONSE_TYPE.TWEET,\n                            tweetContent,\n                            [resultParse.sentiment.positiveScore, resultParse.sentiment.negativeScore, Number(resultParse.sentiment.neutralScore) + Number(resultParse.sentiment.mixedScore)],\n                            resultParse.languageCode,\n                            resultParse.entities\n                        )}\n                    >\n                        {locale === \"hi-HI\" ? \"मेल रिपोर्ट\" : \"Mail Report\"}\n                    </a> : <></>\n                    }\n                </div>\n\n                {\n                    result.length === 0 ? (clicked ? <div>\n                        <img src=\"/loader.gif\" alt=\"loader\" className={styles.loader}/>\n                    </div>: \n                    <></>\n                    ) :\n                        <>\n                            <ReportTweet locale={locale} result={result} />\n                        </>\n                }\n            </main>\n            <ToastContainer\n                autoClose={10000}\n                closeOnClick />\n        </div>\n    );\n}","/Users/aemiej/Documents/github/hackmanthon/client/components/mailTo.js",[],{"ruleId":"129","severity":1,"message":"130","line":3,"column":1,"nodeType":"131","endLine":29,"endColumn":2},{"ruleId":"129","severity":1,"message":"130","line":3,"column":1,"nodeType":"131","endLine":29,"endColumn":2},{"ruleId":"129","severity":1,"message":"130","line":3,"column":1,"nodeType":"131","endLine":22,"endColumn":2},{"ruleId":"129","severity":1,"message":"130","line":3,"column":1,"nodeType":"131","endLine":16,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":188,"column":29,"nodeType":"134","endLine":188,"endColumn":92},{"ruleId":"132","severity":1,"message":"133","line":122,"column":25,"nodeType":"134","endLine":122,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":122,"column":25,"nodeType":"134","endLine":122,"endColumn":50},{"ruleId":"132","severity":1,"message":"133","line":188,"column":25,"nodeType":"134","endLine":188,"endColumn":88},{"ruleId":"132","severity":1,"message":"133","line":187,"column":29,"nodeType":"134","endLine":187,"endColumn":93},{"ruleId":"132","severity":1,"message":"133","line":217,"column":25,"nodeType":"134","endLine":217,"endColumn":88},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]